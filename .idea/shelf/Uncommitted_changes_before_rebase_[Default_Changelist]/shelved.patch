Index: app/src/main/java/com/example/module7/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.module7\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.ScrollView\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.res.ResourcesCompat\r\nimport androidx.recyclerview.widget.ItemTouchHelper\r\nimport androidx.recyclerview.widget.ItemTouchHelper.*\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.module7.Model.AlmostVirtualMachine\r\nimport com.example.module7.Model.Block\r\nimport com.example.module7.Model.RecyclerviewAdapter\r\nimport com.example.module7.databinding.ActivityMainBinding\r\nimport com.leinardi.android.speeddial.SpeedDialActionItem\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityMainBinding\r\n    lateinit var recyclerviewAdapter: RecyclerviewAdapter\r\n    private lateinit var blockList: ArrayList<Block>\r\n\r\n\r\n    private val itemTouchHelper by lazy {\r\n        val itemTouchCallback =\r\n            object : ItemTouchHelper.SimpleCallback(UP or DOWN or START or END, RIGHT) {\r\n                override fun onMove(\r\n                    recyclerView: RecyclerView,\r\n                    viewHolder: RecyclerView.ViewHolder,\r\n                    target: RecyclerView.ViewHolder\r\n                ): Boolean {\r\n                    val recyclerviewAdapter = recyclerView.adapter as RecyclerviewAdapter\r\n                    val fromPosition = viewHolder.adapterPosition\r\n                    val toPosition = target.adapterPosition\r\n                    recyclerviewAdapter.moveItem(fromPosition, toPosition)\r\n\r\n                    return true\r\n                }\r\n\r\n                override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {\r\n                    val position = viewHolder.adapterPosition\r\n                    recyclerviewAdapter.onItemDismiss(position)\r\n\r\n\r\n                }\r\n\r\n                override fun onSelectedChanged(\r\n                    viewHolder: RecyclerView.ViewHolder?,\r\n                    actionState: Int\r\n                ) {\r\n                    super.onSelectedChanged(viewHolder, actionState)\r\n                    if (actionState == ACTION_STATE_DRAG) {\r\n                        viewHolder?.itemView?.scaleY = 1.3f\r\n                        viewHolder?.itemView?.alpha = 0.7f\r\n\r\n                    }\r\n                }\r\n\r\n                override fun clearView(\r\n                    recyclerView: RecyclerView,\r\n                    viewHolder: RecyclerView.ViewHolder\r\n                ) {\r\n                    super.clearView(recyclerView, viewHolder)\r\n                    viewHolder.itemView.scaleY = 1.0f\r\n                    viewHolder.itemView.alpha = 1.0f\r\n                }\r\n\r\n            }\r\n        ItemTouchHelper(itemTouchCallback)\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        val buttonRun = binding.buttonRun\r\n        val consoleOpen = binding.consoleOpen\r\n        val console = binding.console\r\n        val output = binding.Output\r\n        val input = binding.Input\r\n        val buttonResume = binding.buttonResume\r\n        val buttonRestart = binding.buttonRestart\r\n        val consoleClose = binding.consoleClose\r\n        setContentView(view)\r\n\r\n        init()\r\n        itemTouchHelper.attachToRecyclerView(binding.rcView)\r\n        blockList = ArrayList()\r\n        recyclerviewAdapter = RecyclerviewAdapter()\r\n        binding.rcView.adapter = recyclerviewAdapter\r\n\r\n\r\n        binding.buttonRun.setOnClickListener {\r\n            var str = \"\"\r\n            for (i in 0 until recyclerviewAdapter.blockList.size) {\r\n                val item = recyclerviewAdapter.blockList[i]\r\n                when (item.type) {\r\n                    \"var\" -> {\r\n                        val varName = item.getNameEditText()\r\n                        if (varName == null) {\r\n                        } // Не введено имя переменной\r\n                        var varValue = item.getValueEditText()\r\n                        if (varValue == null) varValue = \"0\"\r\n                        // тут имя переменной и значение при присваивании\r\n                    }\r\n                    \"assignment\" -> {\r\n                        val varName = item.getNameEditText()\r\n                        if (varName == null) {\r\n                        } // Не введено имя переменной\r\n                        var expression = item.getValueEditText()\r\n                        if (expression == null) expression = \"0\"\r\n                        // имя объекта, которому что-то присваивается и присваиваемое значение\r\n                    }\r\n                    \"in\" -> {\r\n                        val varName = item.getNameEditText()\r\n                        if (varName == null) {\r\n                        } // Не введено имя переменной\r\n                        //имя объекта которого вводит пользователь\r\n                    }\r\n                    \"out\" -> {\r\n                        val varName = item.getNameEditText()\r\n                        if (varName == null) {\r\n                        } // Не введено имя переменной\r\n                        //имя объекта которого выводит пользователь\r\n                    }\r\n                    \"if\" -> {\r\n                        val firstExpression = item.getNameEditText()\r\n                        if (firstExpression == null) {\r\n                        } // Не введена левая часть сравнения\r\n                        val secondExpression = item.getValueEditText()\r\n                        if (secondExpression == null) {\r\n                        } // Не введена правая часть сравнения\r\n                        val comparison = item.comparison\r\n                        //Тут обе части сравнения и оператор сравнения\r\n                    }\r\n                    \"else\" -> {\r\n                        //просто блок else\r\n                    }\r\n                    \"begin\" -> {\r\n                        //блок begin\r\n                    }\r\n                    \"end\" -> {\r\n                        //блок end\r\n                    }\r\n                    \"while\" -> {\r\n                        val expression = item.getNameEditText()\r\n                        if (expression == null) {\r\n                        } // логическое выражение не введено\r\n                        //логическое выражение\r\n                    }\r\n                    \"array\" -> {\r\n                        val arrayName = item.getNameEditText()\r\n                        if (arrayName == null) {\r\n                        } // не введено имя массива\r\n                        val arraySize = item.getValueEditText()\r\n                        if (arraySize == null) {\r\n                        } // не указан размер массива\r\n                        //имя массива и размер\r\n                    }\r\n                    \"increment\" -> {\r\n                        val varName = item.getNameEditText()\r\n                        if (varName == null) {\r\n                        } // не введено имя увеличиваемого объекта\r\n                        // блок для ++\r\n                    }\r\n                    \"decrement\" -> {\r\n                        val varName = item.getNameEditText()\r\n                        if (varName == null) {\r\n                        } // не введено имя уменьшаемого объекта\r\n                        // блок для --\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            val program = AlmostVirtualMachine(\r\n                \"\"\"\r\n                |int n;\r\n                |int m;\r\n                |in n;\r\n                |in m;\r\n                |arr A 'n * m';\r\n                |int i;\r\n                |int j;\r\n                |while 'i < n';\r\n                    |while 'j < m';\r\n                        |in A[i * m + j];\r\n                        |++ j;\r\n                    |end;\r\n                    |++ i;\r\n                    |= j '0';\r\n                |end;\r\n                |arr B 'm';\r\n                |= i '0';\r\n                |while 'i < n';\r\n                    |while 'j < m';\r\n                        |= B[j] 'A[i * m + j]';\r\n                        |++ j;\r\n                    |end;\r\n                    |out '*{B}';\r\n                    |++ i;\r\n                    |= j '0';\r\n                |end;\"\"\".trimMargin()\r\n            )\r\n\r\n            var expectingInput: Boolean? = null\r\n\r\n            fun updateConsole(program: AlmostVirtualMachine?) {\r\n                console.visibility = View.VISIBLE\r\n                consoleClose.visibility = View.VISIBLE\r\n                when (expectingInput) {\r\n                    null -> {\r\n                        buttonRestart.visibility = View.GONE\r\n                        buttonResume.visibility = View.GONE\r\n                        input.visibility = View.GONE\r\n                    }\r\n                    true -> {\r\n                        buttonRestart.visibility = View.GONE\r\n                        buttonResume.visibility = View.VISIBLE\r\n                        input.visibility = View.VISIBLE\r\n                        input.requestFocus()\r\n                    }\r\n                    else -> {\r\n                        buttonRestart.visibility = View.VISIBLE\r\n                        buttonResume.visibility = View.GONE\r\n                        input.visibility = View.GONE\r\n                        output.text = program?.output ?: output.text\r\n                    }\r\n                }\r\n            }\r\n\r\n            fun run() {\r\n                val program = AlmostVirtualMachine(code)\r\n                program.doLog = true\r\n                output.text = null\r\n\r\n                buttonResume.setOnClickListener {\r\n                    program.output = input.text.toString() + \"\\n\"\r\n                    program.input = input.text.toString()\r\n                    try {\r\n                        program.execute()\r\n                    } catch (e: Error) {\r\n                        program.output += e.message\r\n                    }\r\n                    expectingInput = false\r\n                    updateConsole(program)\r\n                }\r\n\r\n                if (program.findInstruction(\"in\") == null) {\r\n                    try {\r\n                        program.execute()\r\n                    } catch (e: Error) {\r\n                        program.output += e.message\r\n                    }\r\n                    expectingInput = false\r\n                } else {\r\n                    expectingInput = true\r\n                }\r\n                updateConsole(program)\r\n            }\r\n            buttonRun.setOnClickListener {\r\n                input.text = null\r\n                run()\r\n            }\r\n            buttonRestart.setOnClickListener {\r\n                run()\r\n            }\r\n            consoleClose.setOnClickListener {\r\n                console.visibility = View.GONE\r\n                consoleClose.visibility = View.GONE\r\n                buttonResume.visibility = View.GONE\r\n                buttonRestart.visibility = View.GONE\r\n            }\r\n            consoleOpen.setOnClickListener {\r\n                updateConsole(null)\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    @SuppressLint(\"ResourceAsColor\")\r\n    private fun init() {\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.creating_variable, R.drawable.ic_add_var_24)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.var_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Создание переменной\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.assignment, R.drawable.ic_assignment_24dp)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.assignment_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Присваивание\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.creating_in, R.drawable.ic_add_in)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.in_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Ввод\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.creating_out, R.drawable.ic_add_out)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.out_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Вывод\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.creating_if, R.drawable.ic_add_if)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.if_else_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Условие\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.creating_while, R.drawable.ic_add_while)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.while_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Цикл while\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.creating_array, R.drawable.ic_add_array)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.array_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Массив\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.creating_increment, R.drawable.ic_add_increment)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.increment_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Инкремент\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.addActionItem(\r\n            SpeedDialActionItem.Builder(R.id.creating_decrement, R.drawable.ic_add_decrement)\r\n                .setFabBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.decrement_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setFabImageTintColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.white,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabel(\"Декремент\")\r\n                .setLabelColor(R.color.label_color)\r\n                .setLabelBackgroundColor(\r\n                    ResourcesCompat.getColor(\r\n                        resources,\r\n                        R.color.label_back,\r\n                        theme\r\n                    )\r\n                )\r\n                .setLabelClickable(false)\r\n                .create()\r\n        )\r\n        binding.buttonAdd.setOnActionSelectedListener { actionItem ->\r\n            when (actionItem.id) {\r\n                R.id.creating_variable -> {\r\n                    recyclerviewAdapter.addBlock(\"var\", \"\")\r\n                }\r\n                R.id.assignment -> {\r\n                    recyclerviewAdapter.addBlock(\"assignment\", \"\")\r\n                }\r\n                R.id.creating_in -> {\r\n                    recyclerviewAdapter.addBlock(\"in\", \"\")\r\n                }\r\n                R.id.creating_out -> {\r\n                    recyclerviewAdapter.addBlock(\"out\", \"\")\r\n                }\r\n                R.id.creating_if -> {\r\n                    val myDialog = LayoutInflater.from(this).inflate(R.layout.if_dialog, null)\r\n                    val myBuilder = AlertDialog.Builder(this)\r\n                        .setView(myDialog)\r\n                        .setTitle(\"Укажите детали\")\r\n                    val myAlertDialog = myBuilder.show()\r\n                    myDialog.findViewById<Button>(R.id.buttonCreate).setOnClickListener {\r\n                        val comparison =\r\n                            myDialog.findViewById<Spinner>(R.id.comparisons).selectedItem.toString()\r\n                        val checkElse = myDialog.findViewById<CheckBox>(R.id.checkElse)\r\n                        if (checkElse.isChecked) {\r\n                            recyclerviewAdapter.addBlock(\"if\", comparison)\r\n                            recyclerviewAdapter.addBlock(\"begin\", \"\")\r\n                            recyclerviewAdapter.addBlock(\"end\", \"\")\r\n                            recyclerviewAdapter.addBlock(\"else\", \"\")\r\n                            recyclerviewAdapter.addBlock(\"begin\", \"\")\r\n                            recyclerviewAdapter.addBlock(\"end\", \"\")\r\n                        } else {\r\n                            recyclerviewAdapter.addBlock(\"if\", comparison)\r\n                            recyclerviewAdapter.addBlock(\"begin\", \"\")\r\n                            recyclerviewAdapter.addBlock(\"end\", \"\")\r\n                        }\r\n                        myAlertDialog.dismiss()\r\n\r\n                    }\r\n                    myDialog.findViewById<Button>(R.id.buttonClose).setOnClickListener {\r\n                        myAlertDialog.dismiss()\r\n                    }\r\n\r\n                }\r\n                R.id.creating_while -> {\r\n                    recyclerviewAdapter.addBlock(\"while\", \"\")\r\n                    recyclerviewAdapter.addBlock(\"begin\", \"\")\r\n                    recyclerviewAdapter.addBlock(\"end\", \"\")\r\n                }\r\n                R.id.creating_array -> {\r\n                    recyclerviewAdapter.addBlock(\"array\", \"\")\r\n                }\r\n                R.id.creating_increment -> {\r\n                    recyclerviewAdapter.addBlock(\"increment\", \"\")\r\n                }\r\n                R.id.creating_decrement -> {\r\n                    recyclerviewAdapter.addBlock(\"decrement\", \"\")\r\n                }\r\n            }\r\n            false\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/module7/MainActivity.kt b/app/src/main/java/com/example/module7/MainActivity.kt
--- a/app/src/main/java/com/example/module7/MainActivity.kt	(revision 0ddd9c4a7171b22ab913b2fe2fcfd7409ef4746d)
+++ b/app/src/main/java/com/example/module7/MainActivity.kt	(date 1652968081473)
@@ -78,7 +78,6 @@
         binding = ActivityMainBinding.inflate(layoutInflater)
         val view = binding.root
         val buttonRun = binding.buttonRun
-        val consoleOpen = binding.consoleOpen
         val console = binding.console
         val output = binding.Output
         val input = binding.Input
