Index: app/src/main/java/com/example/module7/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.module7\r\n\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.ScrollView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.ItemTouchHelper\r\nimport androidx.recyclerview.widget.ItemTouchHelper.*\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.module7.Model.AlmostVirtualMachine\r\nimport com.example.module7.Model.RecyclerviewAdapter\r\nimport com.example.module7.databinding.ActivityMainBinding\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivityMainBinding\r\n    lateinit var recyclerviewAdapter: RecyclerviewAdapter\r\n\r\n    private val itemTouchHelper by lazy {\r\n        val itemTouchCallback =\r\n            object : ItemTouchHelper.SimpleCallback(UP or DOWN or START or END, RIGHT) {\r\n                override fun onMove(\r\n                    recyclerView: RecyclerView,\r\n                    viewHolder: RecyclerView.ViewHolder,\r\n                    target: RecyclerView.ViewHolder\r\n                ): Boolean {\r\n                    val recyclerviewAdapter = recyclerView.adapter as RecyclerviewAdapter\r\n                    val fromPosition = viewHolder.adapterPosition\r\n                    val toPosition = target.adapterPosition\r\n                    recyclerviewAdapter.moveItem(fromPosition, toPosition)\r\n\r\n                    return true\r\n                }\r\n\r\n                override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {\r\n                    val position = viewHolder.adapterPosition\r\n                    recyclerviewAdapter.onItemDismiss(position)\r\n\r\n\r\n                }\r\n\r\n                override fun onSelectedChanged(\r\n                    viewHolder: RecyclerView.ViewHolder?,\r\n                    actionState: Int\r\n                ) {\r\n                    super.onSelectedChanged(viewHolder, actionState)\r\n                    if (actionState == ACTION_STATE_DRAG) {\r\n                        viewHolder?.itemView?.scaleY = 1.3f\r\n                        viewHolder?.itemView?.alpha = 0.7f\r\n\r\n                    }\r\n                }\r\n\r\n                override fun clearView(\r\n                    recyclerView: RecyclerView,\r\n                    viewHolder: RecyclerView.ViewHolder\r\n                ) {\r\n                    super.clearView(recyclerView, viewHolder)\r\n                    viewHolder.itemView.scaleY = 1.0f\r\n                    viewHolder.itemView.alpha = 1.0f\r\n                }\r\n\r\n            }\r\n        ItemTouchHelper(itemTouchCallback)\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMainBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        val buttonRun = binding.buttonRun\r\n        val consoleOpen = binding.consoleOpen\r\n        val console = binding.console\r\n        val output = binding.Output\r\n        val input = binding.Input\r\n        val buttonResume = binding.buttonResume\r\n        val buttonRestart = binding.buttonRestart\r\n        val consoleClose = binding.consoleClose\r\n        setContentView(view)\r\n\r\n        init()\r\n        itemTouchHelper.attachToRecyclerView(binding.rcView)\r\n        recyclerviewAdapter = RecyclerviewAdapter()\r\n        binding.rcView.adapter = recyclerviewAdapter\r\n\r\n        val code = \"\"\"\r\n                |int n;\r\n                |int m;\r\n                |in n;\r\n                |in m;\r\n                |arr A 'n * m';\r\n                |int i;\r\n                |int j;\r\n                |while 'i < n';\r\n                    |while 'j < m';\r\n                        |in A[i * m + j];\r\n                        |++ j;\r\n                    |end;\r\n                    |++ i;\r\n                    |= j '0';\r\n                |end;\r\n                |arr B 'm';\r\n                |= i '0';\r\n                |while 'i < n';\r\n                    |while 'j < m';\r\n                        |= B[j] 'A[i * m + j]';\r\n                        |++ j;\r\n                    |end;\r\n                    |out '*{B}';\r\n                    |++ i;\r\n                    |= j '0';\r\n                |end;\"\"\".trimMargin()\r\n\r\n        var expectingInput: Boolean? = null\r\n\r\n        fun updateConsole(program: AlmostVirtualMachine?) {\r\n            console.visibility = View.VISIBLE\r\n            consoleClose.visibility = View.VISIBLE\r\n            when (expectingInput) {\r\n                null -> {\r\n                    buttonRestart.visibility = View.GONE\r\n                    buttonResume.visibility = View.GONE\r\n                    input.visibility = View.GONE\r\n                }\r\n                true -> {\r\n                    buttonRestart.visibility = View.GONE\r\n                    buttonResume.visibility = View.VISIBLE\r\n                    input.visibility = View.VISIBLE\r\n                    input.requestFocus()\r\n                }\r\n                else -> {\r\n                    buttonRestart.visibility = View.VISIBLE\r\n                    buttonResume.visibility = View.GONE\r\n                    input.visibility = View.GONE\r\n                    output.text = program?.output ?: output.text\r\n                }\r\n            }\r\n        }\r\n\r\n        fun run() {\r\n            val program = AlmostVirtualMachine(code)\r\n            program.doLog = true\r\n            output.text = null\r\n\r\n            buttonResume.setOnClickListener {\r\n                program.output = input.text.toString() + \"\\n\"\r\n                program.input = input.text.toString()\r\n                try {\r\n                    program.execute()\r\n                } catch (e: Error) {\r\n                    program.output += e.message\r\n                }\r\n                expectingInput = false\r\n                updateConsole(program)\r\n            }\r\n\r\n            if (program.findInstruction(\"in\") == null) {\r\n                try {\r\n                    program.execute()\r\n                } catch (e: Error) {\r\n                    program.output += e.message\r\n                }\r\n                expectingInput = false\r\n            } else {\r\n                expectingInput = true\r\n            }\r\n            updateConsole(program)\r\n        }\r\n        buttonRun.setOnClickListener {\r\n            input.text = null\r\n            run()\r\n        }\r\n        buttonRestart.setOnClickListener{\r\n            run()\r\n        }\r\n        consoleClose.setOnClickListener {\r\n            console.visibility = View.GONE\r\n            consoleClose.visibility = View.GONE\r\n            buttonResume.visibility = View.GONE\r\n            buttonRestart.visibility = View.GONE\r\n        }\r\n        consoleOpen.setOnClickListener {\r\n            updateConsole(null)\r\n        }\r\n    }\r\n\r\n    private fun init() {\r\n        binding.buttonAdd.setOnClickListener {\r\n            val rnds = (0..10).random()\r\n            recyclerviewAdapter.addBlocks(rnds)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/module7/MainActivity.kt b/app/src/main/java/com/example/module7/MainActivity.kt
--- a/app/src/main/java/com/example/module7/MainActivity.kt	(revision 5c1240ae41b7c74018de0de39c87ee4375934ba0)
+++ b/app/src/main/java/com/example/module7/MainActivity.kt	(date 1652523969661)
@@ -138,8 +138,12 @@
 
         fun run() {
             val program = AlmostVirtualMachine(code)
-            program.doLog = true
+            //program.doLog = true
             output.text = null
+            for (item in recyclerviewAdapter.arrayItems) {
+                output.text = output.text.toString() + item.number + " "
+            }
+            output.text = output.text.toString() + "\n"
 
             buttonResume.setOnClickListener {
                 program.output = input.text.toString() + "\n"
